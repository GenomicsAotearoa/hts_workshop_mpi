{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#high-throughput-sequencing","title":"High Throughput Sequencing","text":""},{"location":"common_terms/","title":"Common terms","text":""},{"location":"common_terms/#glossary","title":"Glossary","text":""},{"location":"common_terms/#absolute-path","title":"Absolute path","text":"<ul> <li>A path that refers to a particular location in a file system.</li> <li>Absolute paths are usually written with respect to the file system's root directory, and begin with <code>/</code> (<code>\\\\</code> on Microsoft Windows).</li> <li>See also: relative path</li> </ul>"},{"location":"common_terms/#argument","title":"Argument","text":"<ul> <li>A value given to a function or program when it runs.</li> <li>The term is often used interchangeably (and inconsistently) with parameter.</li> </ul>"},{"location":"common_terms/#command-shell","title":"Command shell","text":"<ul> <li>See shell</li> </ul>"},{"location":"common_terms/#command-line-interface","title":"Command-line interface","text":"<ul> <li>A user interface based on typing commands, usually at a REPL.</li> <li>See also: graphical user interface</li> </ul>"},{"location":"common_terms/#comment","title":"Comment","text":"<ul> <li>A remark in a program that is intended to help human readers understand what is going on, but is ignored by the computer.</li> <li>Comments in <code>Python</code>, <code>R</code>, and the Unix shell start with a <code>#</code> character and run to the end of the line, other languages have other conventions.</li> </ul>"},{"location":"common_terms/#current-working-directory","title":"Current working directory","text":"<ul> <li>The directory that relative paths are calculated from.</li> <li>Equivalently, the place where files referenced by name only are searched for.</li> <li>Every process has a current working directory.</li> <li>The current working directory is usually referred to using the shorthand notation <code>.</code> (pronounced \"dot\").</li> </ul>"},{"location":"common_terms/#file-system","title":"File system","text":"<ul> <li>A set of files, directories, and I/O devices (such as keyboards and screens).</li> <li>A file system may be spread across many physical devices, or many file systems may be stored on a single physical device; the operating system manages access.</li> </ul>"},{"location":"common_terms/#filename-extension","title":"Filename extension","text":"<ul> <li>The portion of a file's name that comes after the final \".\" character.</li> <li>By convention this identifies the file's type.</li> <li>For example, <code>.txt</code> means \"text file\", <code>.png</code> means \"Portable Network Graphics file\"</li> <li>These conventions are not enforced by most operating systems and it is perfectly possible (but confusing!) to name an MP3 sound file <code>homepage.html</code>.</li> <li>Many applications use filename extensions to identify the MIME type of the file, so misnaming files may cause those applications to fail.</li> </ul>"},{"location":"common_terms/#filter","title":"Filter","text":"<ul> <li>A program that transforms a stream of data.</li> <li>Many Unix command-line tools are written as filters - they read data from standard input, process it, and write the result to standard output.</li> </ul>"},{"location":"common_terms/#flag","title":"Flag","text":"<ul> <li>A terse way to specify an option or setting to a command-line program.</li> <li>Conventions for flags vary between operating systems.</li> <li>Unix applications use a dash followed by a single letter, such as <code>-v</code>, or two dashes followed by a word, such as <code>--verbose</code>.</li> <li>DOS applications use a slash, such as <code>/V</code>.</li> <li>Depending on the application, a flag may be followed by a single argument, as in <code>-o /tmp/output.txt</code>.</li> </ul>"},{"location":"common_terms/#for-loop","title":"For loop","text":"<ul> <li>A loop that is executed once for each value in some kind of set, list, or range.</li> <li>See also: loop, while loop</li> </ul>"},{"location":"common_terms/#graphical-user-interface","title":"Graphical user interface","text":"<ul> <li>A user interface based on selecting items and actions from a graphical display, usually controlled by using a mouse.</li> <li>See also: command-line interface</li> </ul>"},{"location":"common_terms/#home-directory","title":"Home directory","text":"<ul> <li>The default directory associated with an account on a computer system.</li> <li>By convention, all of a user's files are stored in or below her home directory.</li> </ul>"},{"location":"common_terms/#loop","title":"Loop","text":"<ul> <li>A set of instructions to be executed multiple times. Consists of a loop body and (usually) a condition for exiting the loop.</li> <li>See also for loop and while loop</li> </ul>"},{"location":"common_terms/#loop-body","title":"Loop body","text":"<ul> <li>The set of statements or commands that are repeated inside a for loop or while loop.</li> </ul>"},{"location":"common_terms/#mime-type","title":"MIME type","text":"<p>*MIME (Multi-Purpose Internet Mail Extensions) types describe different file types for exchange on the Internet, for example images, audio, and documents.</p>"},{"location":"common_terms/#operating-system","title":"Operating system","text":"<ul> <li>Software that manages interactions between users, hardware, and software processes. Common examples are Linux, OS X, and Windows.</li> </ul>"},{"location":"common_terms/#parameter","title":"Parameter","text":"<ul> <li>A variable named in a function's declaration that is used to hold a value passed into the call.</li> <li>The term is often used interchangeably (and inconsistently) with argument.</li> </ul>"},{"location":"common_terms/#parent-directory","title":"Parent directory","text":"<ul> <li>The directory that \"contains\" the one in question.</li> <li>Every directory in a file system except the root directory has a parent.</li> <li>A directory's parent is usually referred to using the shorthand notation <code>..</code> (pronounced \"dot dot\").</li> </ul>"},{"location":"common_terms/#path","title":"Path","text":"<ul> <li>A description that specifies the location of a file or directory within a file system.</li> <li>See also: absolute path, relative path</li> </ul>"},{"location":"common_terms/#pipe","title":"Pipe","text":"<ul> <li>A connection from the output of one program to the input of another.</li> <li>When two or more programs are connected in this way, they are called a \"pipeline\".</li> </ul>"},{"location":"common_terms/#process","title":"Process","text":"<ul> <li>A running instance of a program, containing code, variable values, open files and network connections, and so on.</li> <li>Processes are the \"actors\" that the operating system manages.</li> <li>The operating system typically runs many process at once, allowing each to run for a few milliseconds at a time to give the impression that they are executing simultaneously.</li> </ul>"},{"location":"common_terms/#prompt","title":"Prompt","text":"<ul> <li>A character or characters display by a REPL to show that it is waiting for its next command.</li> </ul>"},{"location":"common_terms/#quoting","title":"Quoting","text":"<ul> <li>Using quotation marks of various kinds to prevent the shell from interpreting special characters.</li> <li>For example, to pass the string <code>*.txt</code> to a program, it is usually necessary to write it as <code>'*.txt'</code> so that the shell will not try to expand the <code>*</code> wildcard.</li> </ul>"},{"location":"common_terms/#read-evaluate-print-loop","title":"Read-evaluate-print loop","text":"<ul> <li>(REPL): A command-line interface that reads a command from the user, executes it, prints the result, and waits for another command.</li> </ul>"},{"location":"common_terms/#redirect","title":"Redirect","text":"<ul> <li>To send a command's output to a file rather than to the screen or another command, or equivalently to read a command's input from a file.</li> </ul>"},{"location":"common_terms/#regular-expression","title":"Regular expression","text":"<ul> <li>A pattern that specifies a set of character strings.</li> <li>REs are most often used to find sequences of characters in strings.</li> </ul>"},{"location":"common_terms/#relative-path","title":"Relative path","text":"<ul> <li>A path that specifies the location of a file or directory with respect to the current working directory.</li> <li>Any path that does not begin with a separator character (<code>/</code> or <code>\\\\</code>) is a relative path.</li> <li>See also: absolute path</li> </ul>"},{"location":"common_terms/#root-directory","title":"Root directory","text":"<ul> <li>The top-most directory in a file system.</li> <li>Its name is <code>/</code> on Unix (including Linux and Mac OS X) and <code>\\\\</code> on Microsoft Windows.</li> </ul>"},{"location":"common_terms/#shell","title":"Shell","text":"<ul> <li>A command-line interface such as Bash (the Bourne-Again Shell) or the Microsoft Windows DOS shell that allows a user to interact with the operating system.</li> </ul>"},{"location":"common_terms/#shell-script","title":"Shell script","text":"<ul> <li>A set of shell commands stored in a file for re-use.</li> <li>A shell script is a program executed by the shell; the name \"script\" is used for historical reasons.</li> </ul>"},{"location":"common_terms/#standard-input","title":"Standard input","text":"<ul> <li>A process's default input stream.</li> <li>In interactive command-line applications, it is typically connected to the keyboard.</li> <li>In a pipe, it receives data from the standard output of the preceding process.</li> </ul>"},{"location":"common_terms/#standard-output","title":"Standard output","text":"<ul> <li>A process's default output stream.</li> <li>In interactive command-line applications, data sent to standard output is displayed on the screen.</li> <li>In a pipe, it is passed to the standard input of the next process.</li> </ul>"},{"location":"common_terms/#sub-directory","title":"Sub-directory","text":"<ul> <li>A directory contained within another directory.</li> </ul>"},{"location":"common_terms/#tab-completion","title":"Tab completion","text":"<ul> <li>A feature provided by many interactive systems in which pressing the Tab key triggers automatic completion of the current word or command.</li> </ul>"},{"location":"common_terms/#variable","title":"Variable","text":"<ul> <li>A name in a program that is associated with a value or a collection of values.</li> </ul>"},{"location":"common_terms/#while-loop","title":"While loop","text":"<ul> <li>A loop that keeps executing as long as some condition is true.</li> <li>See also: loop, for loop</li> </ul>"},{"location":"common_terms/#wildcard","title":"Wildcard","text":"<ul> <li>A character used in pattern matching.</li> <li>In the Unix shell, the wildcard <code>*</code> matches zero or more characters, so that <code>*.txt</code> matches all files whose names end in <code>.txt</code>.</li> </ul>"},{"location":"common_terms/#external-references","title":"External references","text":""},{"location":"common_terms/#opening-a-terminal","title":"Opening a terminal","text":"<ul> <li>Using a UNIX/Linux emulator (Cygwin) or Secure Shell (SSH) client (Putty)</li> <li>Addressing the digital divide in contemporary biology: Lessons from teaching UNIX</li> <li>Unix cheat sheet</li> </ul>"},{"location":"common_terms/#manuals","title":"Manuals","text":"<ul> <li>GNU BASH reference</li> <li>GNU manual</li> <li>Core GNU utilities</li> </ul>"},{"location":"common_terms/#fastq-files","title":"FASTQ files","text":"<ul> <li>Phred quality score</li> <li>FASTQ format</li> </ul>"},{"location":"fastq_format/","title":"The FASTQ file format","text":"<p>In several fo the exercises in this training course we are dealing with fastq files, although we never actually discuss what they contain. This is a file format inteded to convery nucleotide sequence information, similar to a fasta file, as well as per-nucleotide quality information which is expressed as the confidence that a position in the sequence was assigned correctly by the sequencing platform. A comprehensive description of the fastq format and its variatiosn can be found in this article but for the purposes of these workshops there are only a few key points you need to know.</p> <p>Although it looks complicated, the format is actually pretty easy to understand once you know the pattern. Each fastq file is comprised of repeating blocks of 4 lines, where each line describes a single sequence read. Within these four lines:</p> Line Description 1 Is the name of the sequence, and optionally some metadata about the read.This line always begins with a <code>@</code> symbol. 2 The nucleic acid sequence. 3 A placeholder line which divides the nucleic acid sequence and quality information.In some old files this line will contain a <code>+</code> symbol followed by the sequence name.Newer tools tend to just use the <code>+</code> alone to keep the file smaller. 4 A string of characters which represent the quality scores.This string must be the same length as Line 2. <p>Using one of the example files from the training exercises (for example, Level 1, module 3), if we run the <code>head</code> command with a <code>-n</code> parameter of 4 we can view the first complete read in one of the files.</p> <pre><code>$ head -n4 SRR097977.fastq\n@SRR097977.1 209DTAAXX_Lenski2_1_7:8:3:710:178 length=36\nTATTCTGCCATAATGAAATTCGCCACTTGTTAGTGT\n+SRR097977.1 209DTAAXX_Lenski2_1_7:8:3:710:178 length=36\nCCCCCCCCCCCCCCC&gt;CCCCC7CCCCCCACA?5A5&lt;\n</code></pre> <p>Line 4 shows the quality for each nucleotide in the read. Quality is interpreted as the probability of an incorrect base call (e.g. 1 in 10) or, equivalently, the base call accuracy (e.g. 90%). These probability values are the results from the base calling algorithm and dependent on how much signal was captured for the base incorporation.  To make it possible to line up each individual nucleotide with its quality score, the numerical score is converted into a code where each individual character represents the numerical quality score for an individual nucleotide. In the line above, the quality score line is <code>CCCCCCCCCCCCCCC&gt;CCCCC7CCCCCCACA?5A5&lt;</code>.</p> <p>The numerical value assigned to each of these characters depends on the sequencing platform that generated the reads. The sequencing machine used to generate our data uses <code>PHRED+33</code> encoding, which is what is used in all modern Illumina and Nanopore sequencing, as well as Sanger sequencing. Each character is assigned a quality score between 0 and 42 as shown in the chart below.</p> <pre><code>Quality encoding: !\"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJK\n                  |         |         |         |         |\nQuality score:    0........10........20........30........40..\n</code></pre> <p>If you line it up, you can see that the <code>C</code> character has a qualtiy score of 34, which is the most common value in this sequence. The probability of a position with a Q of 34 can be calculated as:</p> \\[ P_{incorrect} = 10^{\\frac{Q}{-10}} = 0.000398107 \\] <p>Which can be converted to the probabilty that the read is correct by</p> \\[ P_{correct} = 1 - P_{incorrect} = 0.9996 \\] <p>Therefore, for any of these characters the base call accuracy is 99.96%. You will almost never need to calculate the per-position score, but it is handy to know the following numbers for when we are quality filtering:</p> Q Accuracy 10 90.00% 20 99.00% 30 99.90% 40 99.99%"},{"location":"slurm_module_guide/","title":"Slurm module guide","text":""},{"location":"slurm_module_guide/#common-commands-slurm","title":"Common commands - slurm","text":""},{"location":"slurm_module_guide/#submit-a-slurm-batch-job","title":"Submit a <code>slurm</code> batch job","text":"<pre><code>$ sbatch job_script.sh\n</code></pre>"},{"location":"slurm_module_guide/#monitor-your-current-jobs","title":"Monitor your current jobs","text":"<pre><code>$ squeue -u USERNAME\n</code></pre>"},{"location":"slurm_module_guide/#cancel-a-queued-or-running-job","title":"Cancel a queued or running job","text":"<pre><code>$ scancel JOB_ID\n</code></pre>"},{"location":"slurm_module_guide/#view-the-status-of-completed-jobs","title":"View the status of completed jobs","text":"<pre><code># A particular job\n$ sacct -j JOB_ID\n\n# All jobs run since the date YYYY-MM-DD\n$ sacct -S YYYY-MM-DD\n\n# All jobs run before the date YYYY-MM-DD\n$ sacct -E YYYY-MM-DD\n</code></pre> <p>Note: There are many more ways to fine tune the output of <code>sacct</code>. Refer to the documentation for more detailed information.</p>"},{"location":"slurm_module_guide/#view-the-efficiency-statistics-for-a-completed-job","title":"View the efficiency statistics for a completed job","text":"<p>Note: This command can be run for a job that is currently in progress, but the values will not be accurate for the full run (i.e. they are the values of the job to date, not the full job).</p> <pre><code>$ seff JOB_ID\n\n$ nn_seff JOB_ID\n</code></pre>"},{"location":"slurm_module_guide/#common-commands-module","title":"Common commands - module","text":""},{"location":"slurm_module_guide/#load-a-specific-program","title":"Load a specific program","text":"<p>Note: All modules on NeSI have version and toolchain/environment suffixes. If none is specified, the default version for the tool is loaded. The default version can be seen with the <code>module avail</code> command.</p> <pre><code>$ module load MY_TOOL\n</code></pre>"},{"location":"slurm_module_guide/#view-available-modules","title":"View available modules","text":"<pre><code># View all modules\n$ module avail\n\n# View all modules which match the keyword in their name\n$ module avail KEYWORD\n\n# View all modules which match the keyword in their name or description\n$ module spider KEYWORD\n</code></pre>"},{"location":"slurm_module_guide/#unload-all-current-modules","title":"Unload all current modules","text":"<pre><code>$ module purge\n</code></pre>"},{"location":"slurm_module_guide/#swap-a-currently-loaded-module-for-a-different-one","title":"Swap a currently loaded module for a different one","text":"<pre><code>$ module switch CURRENT_MODULE DESIRED_MODULE\n</code></pre>"}]}